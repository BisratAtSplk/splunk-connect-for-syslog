# ===============================================================================================
# Direct connection to Splunk via HEC
# ===============================================================================================

# ===============================================================================================
# HEC with standard template
# Be sure to adjust batch paramaters below to suit scale/environment
# Set workers to the number of indexers or HWF HEC endpoints
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

destination d_hec_standard {
    http(url(`splunk-hec-url`)
         method("POST")
         log-fifo-size(`splunk-log-fifo-size`)
         workers(`worker-threads`)
         batch-lines(1000)
         batch-bytes(20Mb)
         batch-timeout(1)
         timeout(5)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password(`splunk-hec-token`)
         persist-name("t_standard")
#        disk-buffer(mem-buf-length(200000)
#                    disk-buf-size(107374182400)
#                    reliable(no)
#                    dir("/usr/local/etc//disk-buffer"))
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
            )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=${.splunk.sourcetype}
                 index=${.splunk.index}
                 event=$(template t_standard)
                 fields.*)')
        );
    };


# ===============================================================================================
# HEC with t_hdr_msg template (for Palo Alto)
# Be sure to adjust batch paramaters below to suit scale/environment
# Set workers to the number of indexers or HWF HEC endpoints
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

destination d_hec_hdr_msg {
    http(url(`splunk-hec-url`)
         method("POST")
         log-fifo-size(`splunk-log-fifo-size`)
         workers(`worker-threads`)
         batch-lines(1000)
         batch-bytes(20Mb)
         batch-timeout(1)
         timeout(5)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password(`splunk-hec-token`)
         persist-name("t_hdr_msg")
#        disk-buffer(mem-buf-length(200000)
#                    disk-buf-size(107374182400)
#                    reliable(no)
#                    dir("/usr/local/etc//disk-buffer"))
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
            )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=${.splunk.sourcetype}
                 index=${.splunk.index}
                 event=$(template t_hdr_msg)
                 fields.*)')
        );
    };


# ===============================================================================================
# HEC with the "everything" template
# Be sure to adjust batch paramaters below to suit scale/environment
# Set workers to the number of indexers or HWF HEC endpoints
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

destination d_hec_everything {
    http(url(`splunk-hec-url`)
         method("POST")
         log-fifo-size(`splunk-log-fifo-size`)
         workers(`worker-threads`)
         batch-lines(1000)
         batch-bytes(20Mb)
         batch-timeout(1)
         timeout(5)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password(`splunk-hec-token`)
         persist-name("t_everything")
#        disk-buffer(mem-buf-length(200000)
#                    disk-buf-size(107374182400)
#                    reliable(no)
#                    dir("/usr/local/etc//disk-buffer"))
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
            )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=${.splunk.sourcetype}
                 index=${.splunk.index}
                 event=$(template t_everything)
                 fields.*)')
        );
    };

# ===============================================================================================
# HEC with the "JSON" template
# Be sure to adjust batch paramaters below to suit scale/environment
# Set workers to the number of indexers or HWF HEC endpoints
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

destination d_hec_json {
    http(url(`splunk-hec-url`)
         method("POST")
         log-fifo-size(`splunk-log-fifo-size`)
         workers(`worker-threads`)
         batch-lines(1000)
         batch-bytes(20Mb)
         batch-timeout(1)
         timeout(5)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password(`splunk-hec-token`)
         persist-name("t_json")
#        disk-buffer(mem-buf-length(200000)
#                    disk-buf-size(107374182400)
#                    reliable(no)
#                    dir("/usr/local/etc//disk-buffer"))
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
            )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=${.splunk.sourcetype}
                 index=${.splunk.index}
                 event=$(template t_JSON)
                 fields.*)')
        );
    };
