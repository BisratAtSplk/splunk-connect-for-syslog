# Symantec Brightmail

{{- if ((getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes") | conv.ToBool) }}
filter f_symantec_brightmail_complete{
    match("yes", value("SMG.COMPLETE") type(glob));
};

parser symantec_brightmail_grouping {
    csv-parser(
        columns(PID, SMG.seq, MESSAGE)
        delimiters(chars("|"))
        flags(greedy)
    );
    grouping-by(
        scope(program)
        key("${SMG.seq}")
        timeout(2)
        aggregate(
             value("MESSAGE" "${PID}|${SMG.seq}|$(implode ';' $(context-values ${MESSAGE}))")
             value("SMG.COMPLETE" "yes")
        )
    );
};
{{- end }}

{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "SYMANTEC_BRIGHTMAIL" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

{{- /* The following is an inline template to generate the actual log path */}}
{{- define "log_path"}}
log {
{{- if eq (.) "yes" }}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_symantec_brightmail);
{{- end }}
{{- if eq (.) "no" }}
    source (s_SYMANTEC_BRIGHTMAIL);
{{- end }}

{{- if ((getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes") | conv.ToBool)  }}
    if {

        filter(f_symantec_brightmail_details);
        parser(symantec_brightmail_grouping);

        if {
            filter(f_symantec_brightmail_complete);

            rewrite {
                set("symantec_brightmail", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("symantec:smg:mail"), index("email"), source("program:${.PROGRAM}"))
            };
            parser { p_add_context_splunk(key("symantec_brightmail")); };
            parser (compliance_meta_by_source);
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_HEC" "no")) }}
            destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_SYMANTEC_BRIGHTMAIL" "no")) }}
            destination(d_archive);
{{- end}}

        };
    } else {
{{- end }}

        rewrite {
            set("symantec_brightmail", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("symantec:smg"), index("email"), source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("symantec_brightmail")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_HEC" "no")) }}
        destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_SYMANTEC_BRIGHTMAIL" "no")) }}
        destination(d_archive);
{{- end}}
{{- if ((getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes") | conv.ToBool) }}
    };
{{- end}}

    flags(flow-control,final);
};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_SYMANTEC_BRIGHTMAIL_TCP_PORT")) (getenv  (print "SC4S_LISTEN_SYMANTEC_BRIGHTMAIL_UDP_PORT"))) (getenv  (print "SC4S_SYMANTEC_BRIGHTMAIL_NSS_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for SYMANTEC_BRIGHTMAIL traffic
{{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for SYMANTEC_BRIGHTMAIL traffic
{{ tmpl.Exec "log_path" "yes" }}
