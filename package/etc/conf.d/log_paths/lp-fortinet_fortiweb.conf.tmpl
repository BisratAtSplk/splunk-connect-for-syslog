# Fortinet FortiWeb
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "FORTINET_FORTIWEB" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_FORTINET_FORTIWEB_TCP_PORT")) (getenv  (print "SC4S_LISTEN_FORTINET_FORTIWEB_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_FORTINET_FORTIWEB_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for FORTINET_FORTIWEB traffic
            source (s_FORTINET_FORTIWEB);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for FORTINET_FORTIWEB traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_fortinet_fortiweb);
            flags(final);
        };
    };

    parser {
        kv-parser(prefix(".kv.") pair-separator(",") template("${MSGHDR} ${MSG}"));
    };

# Fetch timezone from timezone nv pair and parse unique format (no zero padding, e.g. "-8:00" rather than "-08:00"
# Reformat to "-08:00"
    rewrite {
        subst('.*([\+-]\d+:\d+).*', $1, value(".kv.timezone"));
        subst('([\+-])(\d)(?=:)(:\d+)', "${1}0${2}${3}", value(".kv.timezone"));
    };

    #2020-02-12,23:13:33-0800
    #parse the date
    parser {
        date-parser(
                format("%Y-%m-%d,%H:%M:%S%z")
                template('$(substr "$LEGACY_MSGHDR$MSG" "0" "19")${.kv.timezone}')
                time-zone({{- getenv "SC4S_DEFAULT_TIMEZONE" "GMT"}})
                flags(guess-timezone)
        );
    };

    rewrite {
        set("${.kv.devname}", value("HOST"));
        set("fortigate_fortiweb", value("fields.sc4s_vendor_product"));
    };

    if (match("traffic" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fwb_traffic"), index("netfw"))};
       parser {p_add_context_splunk(key("fortinet_fortiweb_traffic")); };
    } elif (match("attack" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fwb_attack"), index("netids"))};
       parser {p_add_context_splunk(key("fortinet_fortiweb_attack")); };
    } elif (match("event" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fwb_event"), index("netops"))};
       parser {p_add_context_splunk(key("fortinet_fortiweb_event")); };
    } else {
       rewrite { r_set_splunk_dest_default(sourcetype("fwb_log"), index("netops"))};
       parser {p_add_context_splunk(key("fortinet_fortiweb_log")); };
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_3164))" value("MSG")); };

{{- if ((getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes") | conv.ToBool) or (conv.ToBool (getenv "SC4S_DEST_FORTINET_FORTIWEB_HEC" "no") | conv.ToBool) }}
    destination(d_hec);
{{- end}}


{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_FORTINET_FORTIWEB") }}
    destination(d_archive);
{{- end}}

    flags(flow-control,final);
};

