# Fortinet Fortios
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "FORTINET_FORTIOS" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_FORTINET_FORTIOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_FORTINET_FORTIOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_FORTINET_FORTIOS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for FORTINET_FORTIOS traffic
            source (s_FORTINET_FORTIOS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for FORTINET_FORTIOS traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_fortinet_fortios);
            flags(final);
        };
    };

    parser {
        kv-parser(prefix(".kv.") template("${MSGHDR} ${MSG}"));
        date-parser(format("%Y-%m-%d:%H:%M:%S") template("${.kv.date}:${.kv.time}") time-zone({{- getenv "SC4S_DEFAULT_TIMEZONE" "GMT"}}) flags(guess-timezone));
    };

    rewrite {
        set("${.kv.devname}", value("HOST"));
        set("fortigate_fortios", value("fields.sc4s_vendor_product"));
    };

    if (match("traffic" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fgt_traffic"), index("netfw"))};
       parser {p_add_context_splunk(key("fortinet_fortios_traffic")); };
    } elif (match("utm" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fgt_utm"), index("netids"))};
       parser {p_add_context_splunk(key("fortinet_fortios_utm")); };
    } elif (match("event" value(".kv.type"))) {
       rewrite { r_set_splunk_dest_default(sourcetype("fgt_event"), index("netops"))};
       parser {p_add_context_splunk(key("fortinet_fortios_event")); };
    } else {
       rewrite { r_set_splunk_dest_default(sourcetype("fgt_log"), index("netops"))};
       parser {p_add_context_splunk(key("fortinet_fortios_log")); };
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_FORTINET_FORTIOS_HEC" "no")) }}
    destination(d_hec);
{{- end}}


{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_FORTINET_FORTIOS" "no")) }}
    destination(d_archive);
{{- end}}

    flags(flow-control,final);
};
