# Juniper IDP
{{ $context := dict "port_id" "INFOBLOX" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}

# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_infoblox);
{{- end}}
{{- if eq (.) "no"}}
    source (s_INFOBLOX);
{{- end}}


    if {
        filter{program("named")};
        rewrite {
            set("infoblox_dns", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:dns"), index("netdns"), source("program:${.PROGRAM}"))
            set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
        };
        parser {
            p_add_context_splunk(key("infoblox_dns"));
        };
    } elif {
        filter{program("dhcpd")};
        rewrite {
            set("infoblox_dhcp", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:dhcp"), index("netipam"), source("program:${.PROGRAM}"))
            set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
        };
        parser {
            p_add_context_splunk(key("infoblox_dhcp"));
        };
    } elif {
        filter{program("threat-protect-log")};
        rewrite {
            set("infoblox_dns", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("infoblox:threat"), index("netids"), source("program:${.PROGRAM}"))
            set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
        };
        parser {
            p_add_context_splunk(key("infoblox_threat"));
        };
    } else {
        rewrite {
            set("nix_syslog", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
        };

        rewrite {
            r_set_splunk_dest_default(sourcetype("nix:syslog"), index("osnix"), source("program:${.PROGRAM}") )
            set("$(template ${fields.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG"));

        };

        parser { p_add_context_splunk(key("nix_syslog")); };
    };


    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        unset(value("PID"));
        groupunset(values(".kv.*"));
    };


{{- if ((getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes") | conv.ToBool) or (conv.ToBool (getenv "SC4S_DEST_INFOBLOX_HEC" "no") | conv.ToBool) }}
    destination(d_hec);
{{- end}}

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_INFOBLOX") }}
    destination(d_archive);
{{- end}}

    flags(flow-control,final);
};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_INFOBLOX_TCP_PORT")) (getenv  (print "SC4S_LISTEN_INFOBLOX_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_INFOBLOX_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for INFOBLOX traffic
    {{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for INFOBLOX traffic
{{ tmpl.Exec "log_path" "yes" }}
