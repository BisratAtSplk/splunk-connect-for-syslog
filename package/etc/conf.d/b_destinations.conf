# ===============================================================================================
# Destination Blocks (functions) for Splunk destinations
# Block argument defaults are defined in main syslog-ng.conf file
# Additional indexed fields (based on syslog-ng macros) can be added to the "with_metadata" blocks
# for both HEC and Kafka.
# Format is "fields.<splunk_indexed_field>=<syslog-ng macro>"
# ===============================================================================================

# ===============================================================================================
# blocks for file destination (for use with the Splunk Universal Forwarder)
# ===============================================================================================

# ===============================================================================================
# Logfile Local Defaults:
# vendor: unassigned
# message: suffix for log file names; "messages"
# ===============================================================================================

block destination d_splunk_logfile(category("") 
                                   vendor("unassigned") 
                                   filename("messages") 
                                   use_template(`splunk-default-template`)
                                   ) {
    file("`splunk-log-root`/`category`/$(lowercase \"${LOGHOST}\")/`vendor`/$(lowercase \"${HOST}\")/${YEAR}.${MONTH}.${DAY}.${HOUR}-`filename`"
         template(`use_template`)
         flush-lines(0)
         create-dirs(yes)
         dir_owner(`splunk-user`)
         dir_group(`splunk-group`)
         dir_perm(0700)
         owner(`splunk-user`)
         group(`splunk-group`)
         perm(0600)
         );
    };

# ===============================================================================================
# blocks for direct connection to Splunk via Kafka and HEC
# ===============================================================================================
# ===============================================================================================
# Kafka with Metadata (Facility and Priority):
# ===============================================================================================

block destination d_kafka_with_metadata (kafka-libs(`kafka-lib-dir`) 
                                         kafka-brokers(`splunk-kafka-brokers`) 
                                         sourcetype(`splunk-sourcetype`) 
                                         topic(`splunk-topic`) 
                                         index(`splunk-index`) 
                                         use_template(`splunk-default-template`)
                                        ) {
    kafka(client-lib-dir("`kafka-libs`")
          kafka-bootstrap-servers("`kafka-brokers`")
          persist-name("`kafka_brokers`_`topic`_`sourcetype`_`index`")
          template('$(format-json
                      time=$S_UNIXTIME.$S_MSEC
                      host=$HOST
                      source=${HOST_FROM}
                      sourcetype=`sourcetype`
                      index=`index`
                      event=$(template `use_template`)
                      fields.facility=$FACILITY
                      fields.severity=$LEVEL)')
          topic("`topic`")
          );
    };

# ===============================================================================================
# Kafka with Full Metadata; additional fields can be added
# ===============================================================================================

block destination d_kafka_with_full_metadata (kafka-libs(`kafka-lib-dir`)
                                              kafka-brokers(`splunk-kafka-brokers`)
                                              sourcetype(`splunk-sourcetype`)
                                              topic(`splunk-topic`)
                                              index(`splunk-index`)
                                              use_template(`splunk-default-template`)
                                             ) {
     kafka(client-lib-dir("`kafka-libs`")
           kafka-bootstrap-servers("`kafka-brokers`")
           persist-name("`kafka_brokers`_`topic`_`sourcetype`_`index`")
           template('$(format-json
                       time=$S_UNIXTIME.$S_MSEC
                       host=$HOST
                       source=${HOST_FROM}
                       sourcetype=`sourcetype`
                       index=`index`
                       event=$(template `use_template`)
                       fields.facility=$FACILITY
                       fields.severity=$LEVEL
                       fields.message_header=$MSGHDR
                       fields.program_name=$PROGRAM
                       fields.pid=$PID
                       fields.full_message=$(template t_everything)
                      )')
          topic("`topic`")
          );
    };

# ===============================================================================================
# Basic Kafka (no indexed fields)
# ===============================================================================================

block destination d_kafka_basic (kafka-libs(`kafka-lib-dir`)
                                 kafka-brokers(`splunk-kafka-brokers`)
                                 sourcetype(`splunk-sourcetype`)
                                 topic(`splunk-topic`)
                                 index(`splunk-index`)
                                 use_template(`splunk-default-template`)
                                 ) {
    kafka(client-lib-dir("`kafka-libs`")
          kafka-bootstrap-servers("`kafka-brokers`")
          persist-name("`kafka_brokers`_`topic`_`sourcetype`_`index`")
          template('$(format-json time=$S_UNIXTIME
                      host=$HOST
                      source=$HOST_FROM
                      sourcetype=`sourcetype`
                      index=`index`
                      event=$(template `use_template`))') 
          topic("`topic`")
          );
    };

# ===============================================================================================
# HEC with Metadata (Facility and Priority):
# Be sure to adjust batch paramaters below to suit scale/environment
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

block destination d_hec_with_metadata (hec-url(`splunk-hec-url`) 
                                       hec-token(`splunk-hec-token`) 
                                       sourcetype(`splunk-sourcetype`) 
                                       index(`splunk-index`) 
                                       use_template(`splunk-default-template`)
                                      ) {
    http(url("`hec-url`")
         method("POST")
         batch-lines(10)
         batch-bytes(512Kb)
         batch-timeout(5000)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password("`hec-token`")
         persist-name("`hec-url`_`sourcetype`_`hec-token`_`index`")
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher") 
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
            )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=`sourcetype`
                 index=`index`
                 event=$(template `use_template`)
                 fields.facility=$FACILITY
                 fields.severity=$LEVEL)')
        );
    };

# ===============================================================================================
# HEC with Full Metadata; additional fields can be added
# Be sure to adjust batch paramaters below to suit scale/environment
# If validated certs are used, uncomment relevant lines in the tls() block below
# and change peer-verify() to "yes"
# ===============================================================================================

block destination d_hec_with_full_metadata(hec-url(`splunk-hec-url`)
                                           hec-token(`splunk-hec-token`)
                                           sourcetype(`splunk-sourcetype`)
                                           index(`splunk-index`)
                                           use_template(`splunk-default-template`)
                                          ) {
    http(url("`hec-url`")
         method("POST")
         batch-lines(10)
         batch-bytes(512Kb)
         batch-timeout(5000)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password("`hec-token`")
         persist-name("`hec-url`_`sourcetype`_`hec-token`_`index`")
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
             )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=`sourcetype`
                 index=`index`
                 event=$(template `use_template`)
		 fields.fullhost_from=${FULLHOST_FROM}
                 fields.facility=$FACILITY
                 fields.severity=$LEVEL
                 fields.message_header=$MSGHDR
                 fields.program_name=$PROGRAM
                 fields.pid=$PID
                 fields.full_message=$(template t_everything)
                )')
        );
    };

# ===============================================================================================
# Basic HEC (no indexed fields)
# ===============================================================================================

block destination d_hec_basic (hec-url(`splunk-hec-url`)
                               hec-token(`splunk-hec-token`)
                               sourcetype(`splunk-sourcetype`)
                               index(`splunk-index`)
                               use_template(`splunk-default-template`)
                              ) {
    http(url("`hec-url`")
         method("POST")
         batch-lines(10)
         batch-bytes(512Kb)
         batch-timeout(5000)
         user_agent("syslog-ng User Agent")
         user("syslog-ng")
         password("`hec-token`")
         persist-name("`hec-url`_`sourcetype`_`hec-token`_`index`")
         tls(peer-verify(no)
#            ca-dir("dir")
#            ca-file("ca")
#            cert-file("cert")
#            cipher-suite("cipher")
#            key-file("key")
#            peer-verify(yes|no)
#            ssl-version(<the permitted SSL/TLS version>)
             )
         body('$(format-json
                 time=$S_UNIXTIME.$S_MSEC
                 host=$HOST
                 source=${HOST_FROM}
                 sourcetype=`sourcetype`
                 index=`index`
                 event=$(template `use_template`))')
        );
    };
